# gui_tab_manager.py
"""
Gestor centralizado de pesta침as para el Bot de WhatsApp con configuraci칩n de selectores
Este m칩dulo se encarga exclusivamente de la coordinaci칩n y navegaci칩n entre las diferentes
pesta침as de la aplicaci칩n (contactos, mensajes, automatizaci칩n, configuraci칩n), actuando como
el cerebro organizador sin implementar l칩gica espec칤fica de cada pesta침a. Incluye la nueva
pesta침a de configuraci칩n para personalizaci칩n de selectores CSS/XPath.
"""

from gui_styles import StyleManager


class TabManager:
    """
    Gestor de pesta침as que coordina la navegaci칩n entre las diferentes secciones de la aplicaci칩n
    Responsable de mostrar/ocultar pesta침as y coordinar la comunicaci칩n entre ellas
    """

    def __init__(self, parent, style_manager: StyleManager, data_manager, whatsapp_bot, update_stats_callback):
        """
        Inicializa el gestor de pesta침as con soporte para configuraci칩n de selectores

        Args:
            parent: Widget padre donde se mostrar치n las pesta침as
            style_manager: Gestor de estilos para mantener consistencia visual
            data_manager: Gestor de datos compartido entre pesta침as
            whatsapp_bot: Instancia del bot para automatizaci칩n
            update_stats_callback: Callback para actualizar estad칤sticas globales
        """
        self.style_manager = style_manager
        self.data_manager = data_manager
        self.whatsapp_bot = whatsapp_bot
        self.update_stats_callback = update_stats_callback
        self.current_tab = "numeros"
        self.parent = parent

        # Crear pesta침as usando imports din치micos para evitar dependencias circulares
        self._create_tabs()

        # Mostrar pesta침a inicial
        self.show_tab("numeros")

    def _create_tabs(self):
        """
        Crea las instancias de todas las pesta침as de la aplicaci칩n incluyendo configuraci칩n
        Utiliza imports locales para evitar dependencias circulares
        """
        # Imports locales para evitar dependencias circulares
        from gui_contacts_tab import NumbersTab
        from gui_messages_tab import MessagesTab
        from gui_automation_tab import AutomationTab
        from gui_config_tab import ConfigTab

        # Crear diccionario de pesta침as con la nueva pesta침a de configuraci칩n
        self.tabs = {
            "numeros": NumbersTab(
                self.parent,
                self.style_manager,
                self.data_manager
            ),
            "mensajes": MessagesTab(
                self.parent,
                self.style_manager,
                self.data_manager
            ),
            "automatizacion": AutomationTab(
                self.parent,
                self.style_manager,
                self.data_manager,
                self.whatsapp_bot,
                self.update_stats_callback
            ),
            "configuracion": ConfigTab(
                self.parent,
                self.style_manager
            )
        }

    def show_tab(self, tab_name):
        """
        Muestra la pesta침a especificada y oculta las dem치s
        Coordina la transici칩n entre pesta침as de forma suave incluyendo configuraci칩n

        Args:
            tab_name: Nombre de la pesta침a a mostrar ("numeros", "mensajes", "automatizacion", "configuracion")
        """
        # Validar que la pesta침a existe
        if tab_name not in self.tabs:
            print(f"Advertencia: Pesta침a '{tab_name}' no encontrada")
            return

        # Ocultar todas las pesta침as actuales
        self._hide_all_tabs()

        # Mostrar la pesta침a seleccionada
        self._show_specific_tab(tab_name)

        # Actualizar pesta침a actual
        self.current_tab = tab_name

    def _hide_all_tabs(self):
        """
        Oculta todas las pesta침as actualmente visibles
        M칠todo auxiliar para limpiar la interfaz antes de mostrar una nueva pesta침a
        """
        for tab in self.tabs.values():
            if hasattr(tab, 'get_frame'):
                tab.get_frame().pack_forget()

    def _show_specific_tab(self, tab_name):
        """
        Muestra una pesta침a espec칤fica y ejecuta su callback de inicializaci칩n

        Args:
            tab_name: Nombre de la pesta침a a mostrar
        """
        target_tab = self.tabs[tab_name]

        # Mostrar el frame de la pesta침a
        if hasattr(target_tab, 'get_frame'):
            target_tab.get_frame().pack(fill="both", expand=True)

        # Ejecutar callback espec칤fico de la pesta침a si existe
        if hasattr(target_tab, 'on_show'):
            target_tab.on_show()

    def get_current_tab(self):
        """
        Obtiene el nombre de la pesta침a actualmente activa

        Returns:
            str: Nombre de la pesta침a actual
        """
        return self.current_tab

    def update_automation_status(self, message):
        """
        Actualiza el estado en la pesta침a de automatizaci칩n
        Permite comunicaci칩n desde componentes externos hacia la pesta침a de automatizaci칩n

        Args:
            message: Mensaje de estado a mostrar en la pesta침a de automatizaci칩n
        """
        if "automatizacion" in self.tabs:
            automation_tab = self.tabs["automatizacion"]
            if hasattr(automation_tab, 'update_status'):
                automation_tab.update_status(message)

    def refresh_all_tabs(self):
        """
        Fuerza la actualizaci칩n de todas las pesta침as
        칔til cuando hay cambios globales que afectan m칰ltiples pesta침as
        """
        for tab_name, tab in self.tabs.items():
            if hasattr(tab, 'on_show'):
                # Solo actualizar si es la pesta침a activa para rendimiento
                if tab_name == self.current_tab:
                    tab.on_show()

    def get_tab_instance(self, tab_name):
        """
        Obtiene la instancia de una pesta침a espec칤fica
        Permite acceso directo a m칠todos espec칤ficos de cada pesta침a

        Args:
            tab_name: Nombre de la pesta침a

        Returns:
            Instancia de la pesta침a o None si no existe
        """
        return self.tabs.get(tab_name, None)

    def is_tab_active(self, tab_name):
        """
        Verifica si una pesta침a espec칤fica est치 actualmente activa

        Args:
            tab_name: Nombre de la pesta침a a verificar

        Returns:
            bool: True si la pesta침a est치 activa
        """
        return self.current_tab == tab_name

    def get_available_tabs(self):
        """
        Obtiene lista de todas las pesta침as disponibles

        Returns:
            List[str]: Lista con nombres de pesta침as disponibles
        """
        return list(self.tabs.keys())

    def get_config_tab_summary(self):
        """
        Obtiene resumen de la configuraci칩n de selectores desde la pesta침a de configuraci칩n

        Returns:
            Dict: Resumen de configuraci칩n de selectores o None si hay error
        """
        try:
            config_tab = self.tabs.get("configuracion")
            if config_tab and hasattr(config_tab, 'get_current_config_summary'):
                return config_tab.get_current_config_summary()
            return None
        except Exception as e:
            print(f"Error obteniendo resumen de configuraci칩n: {e}")
            return None

    def refresh_config_tab(self):
        """
        Refresca espec칤ficamente la pesta침a de configuraci칩n
        칔til cuando se detectan cambios en selectores desde otras partes del sistema
        """
        try:
            config_tab = self.tabs.get("configuracion")
            if config_tab and hasattr(config_tab, 'on_show'):
                config_tab.on_show()
                print("Pesta침a de configuraci칩n refrescada")
        except Exception as e:
            print(f"Error refrescando pesta침a de configuraci칩n: {e}")

    def validate_config_changes(self):
        """
        Valida que los cambios de configuraci칩n sean compatibles con pesta침as activas

        Returns:
            bool: True si la configuraci칩n es v치lida
        """
        try:
            # Si hay automatizaci칩n activa, advertir sobre cambios de configuraci칩n
            if self.whatsapp_bot.is_active():
                print(
                    "Advertencia: Cambios en configuraci칩n no se aplicar치n hasta que termine la automatizaci칩n actual")
                return False

            return True
        except Exception as e:
            print(f"Error validando cambios de configuraci칩n: {e}")
            return False

    def notify_config_changed(self, selector_type: str):
        """
        Notifica a otras pesta침as que la configuraci칩n de selectores ha cambiado

        Args:
            selector_type: Tipo de selector que cambi칩 (ej: 'message_box', 'attach_button')
        """
        try:
            # Log del cambio
            print(f"Configuraci칩n de selector '{selector_type}' actualizada")

            # Notificar a pesta침a de automatizaci칩n si est치 disponible
            automation_tab = self.tabs.get("automatizacion")
            if automation_tab and hasattr(automation_tab, 'update_status'):
                automation_tab.update_status(f"游댢 Configuraci칩n de {selector_type} actualizada")

            # Actualizar callback de estad칤sticas si existe
            if self.update_stats_callback:
                self.update_stats_callback()

        except Exception as e:
            print(f"Error notificando cambio de configuraci칩n: {e}")

    def get_tab_dependencies(self):
        """
        Obtiene informaci칩n sobre dependencias entre pesta침as

        Returns:
            Dict: Informaci칩n sobre dependencias y estado de pesta침as
        """
        return {
            'current_tab': self.current_tab,
            'available_tabs': self.get_available_tabs(),
            'automation_active': self.whatsapp_bot.is_active() if self.whatsapp_bot else False,
            'config_available': 'configuracion' in self.tabs,
            'total_tabs': len(self.tabs)
        }